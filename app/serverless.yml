service: karapaia-matome-api

useDotenv: true

configValidationMode: error

provider:
  name: aws
  region: ap-northeast-1
  runtime: nodejs14.x
  # ${opt:stage}・・・sls deploy --stage devのように--stageオプションで設定した値を使用することができる。
  stage: ${opt:stage, self:custom.defaultStage}
  memorySize: 512 # 128MBだと途中で処理落ちした
  timeout: 30
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'dynamodb:*'
          Resource:
            - 'arn:aws:dynamodb:ap-northeast-1:*:*'
  # CloudWatch Logsの有効期限を設定する
  logRetentionInDays: 7
  apiGateway:
    shouldStartNameWithService: true
  environment:
    TZ: Asia/Tokyo
    # TCP 接続を再利用してより効率的に通信できるようにする
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1' 
  # オプション
  lambdaHashingVersion: 20201221

custom:
  defaultStage: dev
  schedule_active:
    dev: "false"
    prod: "true"
    default: "false"
  serverless-offline:
    host: 0.0.0.0
    httpPort: 9000

plugins:
  - serverless-webpack
  - serverless-offline

functions:
  getPosts:
    handler: src/handler.getKarapaiaPosts
    environment:
      TABLE_NAME: ${env:TABLE_NAME}
    events:
      - http:
          method: GET
          path: posts

  savePosts:
    handler: src/handler.saveKarapaiaPosts
    environment:
      TABLE_NAME: ${env:TABLE_NAME}
    events:
      - schedule:
          # https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html
          rate: cron(0 9 * * ? *) # 日本時間の朝9時に毎日実行
          enabled: ${self:custom.schedule_active.${opt:stage, self:custom.defaultStage}, self:custom.schedule_active.default}

resources:
  Resources:
    # Create DynamoDB
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'karapaia_matome_${opt:stage, self:custom.defaultStage}'
        AttributeDefinitions:
          - AttributeName: title
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: title
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        ProvisionedThroughput: # スループット
          ReadCapacityUnits: 1 # 1RCUは1秒間に2回の読み込み、または結果整合性のある1回の読み込み
          WriteCapacityUnits: 1 # 1秒ごと何回 書き込めるか。
